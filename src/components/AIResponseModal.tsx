import { useState } from 'react';
import { X, Copy, Check, Sparkles, CheckSquare, FileText, MessageCircle } from 'lucide-react';

interface AIResponseModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  content: string;
  type: 'checklist' | 'resume' | 'general';
}

export default function AIResponseModal({ isOpen, onClose, title, content, type }: AIResponseModalProps) {
  const [copied, setCopied] = useState(false);

  if (!isOpen) return null;

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(content);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy text:', error);
    }
  };

  const getTypeIcon = () => {
    switch (type) {
      case 'checklist':
        return <CheckSquare className="w-6 h-6" />;
      case 'resume':
        return <FileText className="w-6 h-6" />;
      default:
        return <MessageCircle className="w-6 h-6" />;
    }
  };

  const getTypeColor = () => {
    switch (type) {
      case 'checklist':
        return 'from-green-500 to-emerald-500';
      case 'resume':
        return 'from-blue-500 to-cyan-500';
      default:
        return 'from-purple-500 to-pink-500';
    }
  };

  const formatContent = (text: string) => {
    // Convert markdown-style formatting to HTML
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/☐/g, '□')
      .replace(/☑/g, '✅')
      .split('\n')
      .map((line) => {
        if (line.startsWith('# ')) {
          return `<h2 class="text-xl font-bold text-gray-900 mt-4 mb-2">${line.slice(2)}</h2>`;
        }
        if (line.startsWith('## ')) {
          return `<h3 class="text-lg font-semibold text-gray-800 mt-3 mb-2">${line.slice(3)}</h3>`;
        }
        if (line.startsWith('- ') || line.startsWith('* ')) {
          return `<li class="ml-4 mb-1">${line.slice(2)}</li>`;
        }
        if (line.match(/^\d+\./)) {
          return `<li class="ml-4 mb-1">${line.replace(/^\d+\./, '')}</li>`;
        }
        if (line.includes('□') || line.includes('☐')) {
          return `<div class="flex items-start space-x-2 mb-2"><span class="text-gray-400 mt-1">□</span><span>${line.replace(/□|☐/, '').trim()}</span></div>`;
        }
        if (line.includes('✅') || line.includes('☑')) {
          return `<div class="flex items-start space-x-2 mb-2"><span class="text-green-500 mt-1">✅</span><span>${line.replace(/✅|☑/, '').trim()}</span></div>`;
        }
        if (line.trim() === '') {
          return '<br>';
        }
        return `<p class="mb-2">${line}</p>`;
      })
      .join('');
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[80vh] overflow-hidden">
        {/* Header */}
        <div className={`bg-gradient-to-r ${getTypeColor()} text-white p-6`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center">
                {getTypeIcon()}
              </div>
              <div>
                <h2 className="text-xl font-bold">{title}</h2>
                <p className="text-white/80 text-sm">Generated by AI Assistant</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-white/80 hover:text-white transition-colors p-2 hover:bg-white/10 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-96">
          <div 
            className="prose prose-sm max-w-none text-gray-700 leading-relaxed"
            dangerouslySetInnerHTML={{ __html: formatContent(content) }}
          />
        </div>

        {/* Footer */}
        <div className="border-t border-gray-100 p-4 flex items-center justify-between bg-gray-50">
          <div className="flex items-center space-x-2 text-sm text-gray-500">
            <Sparkles className="w-4 h-4" />
            <span>Powered by Google Gemini</span>
          </div>
          <button
            onClick={copyToClipboard}
            className="flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors duration-200"
          >
            {copied ? (
              <>
                <Check className="w-4 h-4 text-green-500" />
                <span className="text-green-600">Copied!</span>
              </>
            ) : (
              <>
                <Copy className="w-4 h-4" />
                <span>Copy to Clipboard</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}
